// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobRunnerServiceClient is the client API for JobRunnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobRunnerServiceClient interface {
	StartJob(ctx context.Context, in *JobStartRequest, opts ...grpc.CallOption) (*JobStartOutput, error)
	StopJob(ctx context.Context, in *JobStopRequest, opts ...grpc.CallOption) (*JobStopOutput, error)
	GetJobInfo(ctx context.Context, in *JobQueryRequest, opts ...grpc.CallOption) (*JobInfo, error)
	StreamJobOutput(ctx context.Context, in *JobQueryRequest, opts ...grpc.CallOption) (JobRunnerService_StreamJobOutputClient, error)
}

type jobRunnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobRunnerServiceClient(cc grpc.ClientConnInterface) JobRunnerServiceClient {
	return &jobRunnerServiceClient{cc}
}

func (c *jobRunnerServiceClient) StartJob(ctx context.Context, in *JobStartRequest, opts ...grpc.CallOption) (*JobStartOutput, error) {
	out := new(JobStartOutput)
	err := c.cc.Invoke(ctx, "/JobRunnerService/StartJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobRunnerServiceClient) StopJob(ctx context.Context, in *JobStopRequest, opts ...grpc.CallOption) (*JobStopOutput, error) {
	out := new(JobStopOutput)
	err := c.cc.Invoke(ctx, "/JobRunnerService/StopJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobRunnerServiceClient) GetJobInfo(ctx context.Context, in *JobQueryRequest, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := c.cc.Invoke(ctx, "/JobRunnerService/GetJobInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobRunnerServiceClient) StreamJobOutput(ctx context.Context, in *JobQueryRequest, opts ...grpc.CallOption) (JobRunnerService_StreamJobOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobRunnerService_ServiceDesc.Streams[0], "/JobRunnerService/StreamJobOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobRunnerServiceStreamJobOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobRunnerService_StreamJobOutputClient interface {
	Recv() (*JobStreamOutput, error)
	grpc.ClientStream
}

type jobRunnerServiceStreamJobOutputClient struct {
	grpc.ClientStream
}

func (x *jobRunnerServiceStreamJobOutputClient) Recv() (*JobStreamOutput, error) {
	m := new(JobStreamOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobRunnerServiceServer is the server API for JobRunnerService service.
// All implementations must embed UnimplementedJobRunnerServiceServer
// for forward compatibility
type JobRunnerServiceServer interface {
	StartJob(context.Context, *JobStartRequest) (*JobStartOutput, error)
	StopJob(context.Context, *JobStopRequest) (*JobStopOutput, error)
	GetJobInfo(context.Context, *JobQueryRequest) (*JobInfo, error)
	StreamJobOutput(*JobQueryRequest, JobRunnerService_StreamJobOutputServer) error
	mustEmbedUnimplementedJobRunnerServiceServer()
}

// UnimplementedJobRunnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobRunnerServiceServer struct {
}

func (UnimplementedJobRunnerServiceServer) StartJob(context.Context, *JobStartRequest) (*JobStartOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartJob not implemented")
}
func (UnimplementedJobRunnerServiceServer) StopJob(context.Context, *JobStopRequest) (*JobStopOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopJob not implemented")
}
func (UnimplementedJobRunnerServiceServer) GetJobInfo(context.Context, *JobQueryRequest) (*JobInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobInfo not implemented")
}
func (UnimplementedJobRunnerServiceServer) StreamJobOutput(*JobQueryRequest, JobRunnerService_StreamJobOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamJobOutput not implemented")
}
func (UnimplementedJobRunnerServiceServer) mustEmbedUnimplementedJobRunnerServiceServer() {}

// UnsafeJobRunnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobRunnerServiceServer will
// result in compilation errors.
type UnsafeJobRunnerServiceServer interface {
	mustEmbedUnimplementedJobRunnerServiceServer()
}

func RegisterJobRunnerServiceServer(s grpc.ServiceRegistrar, srv JobRunnerServiceServer) {
	s.RegisterService(&JobRunnerService_ServiceDesc, srv)
}

func _JobRunnerService_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobRunnerServiceServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JobRunnerService/StartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobRunnerServiceServer).StartJob(ctx, req.(*JobStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobRunnerService_StopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobRunnerServiceServer).StopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JobRunnerService/StopJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobRunnerServiceServer).StopJob(ctx, req.(*JobStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobRunnerService_GetJobInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobRunnerServiceServer).GetJobInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JobRunnerService/GetJobInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobRunnerServiceServer).GetJobInfo(ctx, req.(*JobQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobRunnerService_StreamJobOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobRunnerServiceServer).StreamJobOutput(m, &jobRunnerServiceStreamJobOutputServer{stream})
}

type JobRunnerService_StreamJobOutputServer interface {
	Send(*JobStreamOutput) error
	grpc.ServerStream
}

type jobRunnerServiceStreamJobOutputServer struct {
	grpc.ServerStream
}

func (x *jobRunnerServiceStreamJobOutputServer) Send(m *JobStreamOutput) error {
	return x.ServerStream.SendMsg(m)
}

// JobRunnerService_ServiceDesc is the grpc.ServiceDesc for JobRunnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobRunnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "JobRunnerService",
	HandlerType: (*JobRunnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartJob",
			Handler:    _JobRunnerService_StartJob_Handler,
		},
		{
			MethodName: "StopJob",
			Handler:    _JobRunnerService_StopJob_Handler,
		},
		{
			MethodName: "GetJobInfo",
			Handler:    _JobRunnerService_GetJobInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamJobOutput",
			Handler:       _JobRunnerService_StreamJobOutput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/api.proto",
}
